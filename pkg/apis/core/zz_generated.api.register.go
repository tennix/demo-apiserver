/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package core

import (
	"context"
	"fmt"

	"github.com/kubernetes-incubator/apiserver-builder-alpha/pkg/builders"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalTidbBackup = builders.NewInternalResource(
		"tidbbackups",
		"TidbBackup",
		func() runtime.Object { return &TidbBackup{} },
		func() runtime.Object { return &TidbBackupList{} },
	)
	InternalTidbBackupStatus = builders.NewInternalResourceStatus(
		"tidbbackups",
		"TidbBackupStatus",
		func() runtime.Object { return &TidbBackup{} },
		func() runtime.Object { return &TidbBackupList{} },
	)
	InternalTidbInstance = builders.NewInternalResource(
		"tidbinstances",
		"TidbInstance",
		func() runtime.Object { return &TidbInstance{} },
		func() runtime.Object { return &TidbInstanceList{} },
	)
	InternalTidbInstanceStatus = builders.NewInternalResourceStatus(
		"tidbinstances",
		"TidbInstanceStatus",
		func() runtime.Object { return &TidbInstance{} },
		func() runtime.Object { return &TidbInstanceList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("core.pingcap.com").WithKinds(
		InternalTidbBackup,
		InternalTidbBackupStatus,
		InternalTidbInstance,
		InternalTidbInstanceStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

type PullPolicy string
type TaintEffect string
type TolerationOperator string

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type TidbBackup struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   TidbBackupSpec
	Status TidbBackupStatus
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type TidbInstance struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   TidbInstanceSpec
	Status TidbInstanceStatus
}

type TidbBackupStatus struct {
}

type TidbInstanceStatus struct {
}

type TidbInstanceSpec struct {
	Pd   PdSpec
	Tikv TikvSpec
	Tidb TidbSpec
}

type TidbBackupSpec struct {
}

type TidbSpec struct {
	Replicas        int32
	Image           string
	ImagePullPolicy *corev1.PullPolicy
	Resources       corev1.ResourceRequirements
	Tolerations     []corev1.Toleration
}

type TikvSpec struct {
	Replicas         int32
	Image            string
	ImagePullPolicy  *corev1.PullPolicy
	StorageClassName *string
	Resources        corev1.ResourceRequirements
	Tolerations      []corev1.Toleration
}

type Toleration struct {
	Key               string
	Operator          TolerationOperator
	Value             string
	Effect            TaintEffect
	TolerationSeconds *int64
}

type ResourceRequirements struct {
	Limits   ResourceList
	Requests ResourceList
}

type ResourceList struct {
}

type PdSpec struct {
	Replicas         int32
	Image            string
	ImagePullPolicy  *corev1.PullPolicy
	StorageClassName *string
	Resources        corev1.ResourceRequirements
	Tolerations      []corev1.Toleration
}

//
// TidbBackup Functions and Structs
//
// +k8s:deepcopy-gen=false
type TidbBackupStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type TidbBackupStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type TidbBackupList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []TidbBackup
}

func (TidbBackup) NewStatus() interface{} {
	return TidbBackupStatus{}
}

func (pc *TidbBackup) GetStatus() interface{} {
	return pc.Status
}

func (pc *TidbBackup) SetStatus(s interface{}) {
	pc.Status = s.(TidbBackupStatus)
}

func (pc *TidbBackup) GetSpec() interface{} {
	return pc.Spec
}

func (pc *TidbBackup) SetSpec(s interface{}) {
	pc.Spec = s.(TidbBackupSpec)
}

func (pc *TidbBackup) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *TidbBackup) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc TidbBackup) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store TidbBackup.
// +k8s:deepcopy-gen=false
type TidbBackupRegistry interface {
	ListTidbBackups(ctx context.Context, options *internalversion.ListOptions) (*TidbBackupList, error)
	GetTidbBackup(ctx context.Context, id string, options *metav1.GetOptions) (*TidbBackup, error)
	CreateTidbBackup(ctx context.Context, id *TidbBackup) (*TidbBackup, error)
	UpdateTidbBackup(ctx context.Context, id *TidbBackup) (*TidbBackup, error)
	DeleteTidbBackup(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewTidbBackupRegistry(sp builders.StandardStorageProvider) TidbBackupRegistry {
	return &storageTidbBackup{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageTidbBackup struct {
	builders.StandardStorageProvider
}

func (s *storageTidbBackup) ListTidbBackups(ctx context.Context, options *internalversion.ListOptions) (*TidbBackupList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*TidbBackupList), err
}

func (s *storageTidbBackup) GetTidbBackup(ctx context.Context, id string, options *metav1.GetOptions) (*TidbBackup, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*TidbBackup), nil
}

func (s *storageTidbBackup) CreateTidbBackup(ctx context.Context, object *TidbBackup) (*TidbBackup, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*TidbBackup), nil
}

func (s *storageTidbBackup) UpdateTidbBackup(ctx context.Context, object *TidbBackup) (*TidbBackup, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*TidbBackup), nil
}

func (s *storageTidbBackup) DeleteTidbBackup(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, &metav1.DeleteOptions{})
	return sync, err
}

//
// TidbInstance Functions and Structs
//
// +k8s:deepcopy-gen=false
type TidbInstanceStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type TidbInstanceStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type TidbInstanceList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []TidbInstance
}

func (TidbInstance) NewStatus() interface{} {
	return TidbInstanceStatus{}
}

func (pc *TidbInstance) GetStatus() interface{} {
	return pc.Status
}

func (pc *TidbInstance) SetStatus(s interface{}) {
	pc.Status = s.(TidbInstanceStatus)
}

func (pc *TidbInstance) GetSpec() interface{} {
	return pc.Spec
}

func (pc *TidbInstance) SetSpec(s interface{}) {
	pc.Spec = s.(TidbInstanceSpec)
}

func (pc *TidbInstance) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *TidbInstance) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc TidbInstance) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store TidbInstance.
// +k8s:deepcopy-gen=false
type TidbInstanceRegistry interface {
	ListTidbInstances(ctx context.Context, options *internalversion.ListOptions) (*TidbInstanceList, error)
	GetTidbInstance(ctx context.Context, id string, options *metav1.GetOptions) (*TidbInstance, error)
	CreateTidbInstance(ctx context.Context, id *TidbInstance) (*TidbInstance, error)
	UpdateTidbInstance(ctx context.Context, id *TidbInstance) (*TidbInstance, error)
	DeleteTidbInstance(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewTidbInstanceRegistry(sp builders.StandardStorageProvider) TidbInstanceRegistry {
	return &storageTidbInstance{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageTidbInstance struct {
	builders.StandardStorageProvider
}

func (s *storageTidbInstance) ListTidbInstances(ctx context.Context, options *internalversion.ListOptions) (*TidbInstanceList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*TidbInstanceList), err
}

func (s *storageTidbInstance) GetTidbInstance(ctx context.Context, id string, options *metav1.GetOptions) (*TidbInstance, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*TidbInstance), nil
}

func (s *storageTidbInstance) CreateTidbInstance(ctx context.Context, object *TidbInstance) (*TidbInstance, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*TidbInstance), nil
}

func (s *storageTidbInstance) UpdateTidbInstance(ctx context.Context, object *TidbInstance) (*TidbInstance, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*TidbInstance), nil
}

func (s *storageTidbInstance) DeleteTidbInstance(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, &metav1.DeleteOptions{})
	return sync, err
}
