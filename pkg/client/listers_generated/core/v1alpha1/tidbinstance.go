/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/apiserver/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TidbInstanceLister helps list TidbInstances.
type TidbInstanceLister interface {
	// List lists all TidbInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TidbInstance, err error)
	// TidbInstances returns an object that can list and get TidbInstances.
	TidbInstances(namespace string) TidbInstanceNamespaceLister
	TidbInstanceListerExpansion
}

// tidbInstanceLister implements the TidbInstanceLister interface.
type tidbInstanceLister struct {
	indexer cache.Indexer
}

// NewTidbInstanceLister returns a new TidbInstanceLister.
func NewTidbInstanceLister(indexer cache.Indexer) TidbInstanceLister {
	return &tidbInstanceLister{indexer: indexer}
}

// List lists all TidbInstances in the indexer.
func (s *tidbInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.TidbInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TidbInstance))
	})
	return ret, err
}

// TidbInstances returns an object that can list and get TidbInstances.
func (s *tidbInstanceLister) TidbInstances(namespace string) TidbInstanceNamespaceLister {
	return tidbInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TidbInstanceNamespaceLister helps list and get TidbInstances.
type TidbInstanceNamespaceLister interface {
	// List lists all TidbInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TidbInstance, err error)
	// Get retrieves the TidbInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TidbInstance, error)
	TidbInstanceNamespaceListerExpansion
}

// tidbInstanceNamespaceLister implements the TidbInstanceNamespaceLister
// interface.
type tidbInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TidbInstances in the indexer for a given namespace.
func (s tidbInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TidbInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TidbInstance))
	})
	return ret, err
}

// Get retrieves the TidbInstance from the indexer for a given namespace and name.
func (s tidbInstanceNamespaceLister) Get(name string) (*v1alpha1.TidbInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tidbinstance"), name)
	}
	return obj.(*v1alpha1.TidbInstance), nil
}
